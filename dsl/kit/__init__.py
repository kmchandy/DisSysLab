# 1) Import only the function modules (to run @register)
import dsl.block_lib.sources.source_lib.common_sources  # noqa: F401
import dsl.block_lib.transforms.transform_lib.common_transforms  # noqa: F401
import dsl.block_lib.sinks.sink_lib.common_sinks  # noqa: F401

# 2) Adopt registrations
catalog.adopt_from_registry_core()

# 3) Build aliases and inject (FromList, UpperCase, ToConsole, â€¦)
_aliases = catalog.build_kit_aliases()
globals().update(_aliases)

# 4) Re-export routers/core you want in the kit
from dsl.block_lib.routers.fanout import Broadcast, SplitBinary  # noqa: E402
from dsl.block_lib.routers.fanin import MergeSynch, MergeAsynch  # noqa: E402
from dsl.block_lib.graph_structures import pipeline              # noqa: E402
from dsl.core import Network                                     # noqa: E402

# 5) Optional convenience alias
if "ToConsole" in globals():
    Print = globals()["ToConsole"]  # alias

# 6) Build __all__ AFTER everything is in globals()
_explicit = {
    "Network", "pipeline",
    "MergeSynch", "MergeAsynch",
    "Broadcast", "SplitBinary",
}
__all__ = sorted(
    set(_aliases.keys())              # all autogenerated kit classes
    | _explicit                       # routers/core
    | ({"Print"} if "Print" in globals() else set())  # optional alias
)
