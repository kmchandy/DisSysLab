'''
A StreamGenerator is an agent with no inports and a single outport
called 'out'. A StreamGenerator has a a parameter, generator_fn,
which is a Python generator, and a parameter delay. A StreamGenerator
outputs a sequence of messages through outport 'out' where the 
messages are the values generated by generator_fn. When the
generator_fn terminates the StreamGenerator sends '__STOP__' and
halts.

Example Usage:
# A generator that generates 0, 1, 2, .., n-1
def count_up_to(n):
    for i in range(n):
        yield i

# 'gen' is a block that outputs values from generator_fn with n = 3.
net = Network(
    blocks={
        'gen': StreamGenerator(generator_fn=count_up_to, kwargs={'n': 3}),
        'receiver': StreamToList(),
    },
    connections=[('gen', 'out', 'receiver', 'in')]
)
net.run()
assert (net.blocks['receiver'].saved == [0, 1, 2])

'''

from dsl.core import Agent, StreamToList, Network
from typing import Optional, List, Callable, Dict, Tuple, Any


class StreamGenerator(Agent):
    """
    A StreamGenerator is a source block that emits values from a Python generator function.

    Parameters:
    - name: Optional name for the agent
    - description: Optional description
    - generator_fn: A generator function that yields values
    - args: Positional arguments for the generator function
    - kwargs: Keyword arguments for the generator function
    """

    def __init__(
        self,
        name: Optional[str] = None,
        description: Optional[str] = None,
        generator_fn: Optional[Callable[..., Any]] = None,
        args: Optional[tuple] = (),
        kwargs: Optional[dict] = None,
    ):
        if generator_fn is None:
            raise ValueError("StreamGenerator requires a generator_fn")

        if kwargs is None:
            kwargs = {}

        def stream_fn(agent):
            gen = generator_fn(*args, **kwargs)
            while True:
                try:
                    value = next(gen)
                    agent.send(value, "out")
                except StopIteration:
                    agent.send("__STOP__", "out")
                    break
                except Exception as e:
                    print(f"‚ùå StreamGenerator error: {e}")
                    break

        super().__init__(
            name=name or "StreamGenerator",
            description=description or "Emits values from a generator function",
            inports=[],
            outports=["out"],
            run_fn=stream_fn,
        )
